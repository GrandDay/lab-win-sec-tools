name: PowerShell CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint PowerShell Scripts
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
        $results | Format-Table -AutoSize
        
        if ($results) {
          Write-Error "PSScriptAnalyzer found $($results.Count) issue(s)"
          exit 1
        }
  
  test:
    name: Test Installation Script
    runs-on: windows-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Test Script Syntax
      shell: pwsh
      run: |
        $scriptPath = ".\install.ps1"
        $errors = $null
        $null = [System.Management.Automation.PSParser]::Tokenize(
          (Get-Content -Path $scriptPath -Raw), 
          [ref]$errors
        )
        
        if ($errors.Count -gt 0) {
          $errors | Format-Table -AutoSize
          Write-Error "Script has $($errors.Count) syntax error(s)"
          exit 1
        }
        
        Write-Host "✓ Script syntax is valid"
    
    - name: Test PowerShell Version Check
      shell: pwsh
      run: |
        # Source the script functions (without running main)
        $scriptContent = Get-Content -Path .\install.ps1 -Raw
        
        # Test that script requires PS 5.1+
        if ($scriptContent -match '#Requires -Version 5.1') {
          Write-Host "✓ PowerShell version requirement is set"
        } else {
          Write-Error "PowerShell version requirement not found"
          exit 1
        }
    
    - name: Verify Download URLs
      shell: pwsh
      run: |
        # Extract URLs from script
        $scriptContent = Get-Content -Path .\install.ps1 -Raw
        
        $urls = @(
          "https://download.sysinternals.com/files/ProcessExplorer.zip",
          "https://download.sysinternals.com/files/Autoruns.zip"
        )
        
        foreach ($url in $urls) {
          Write-Host "Testing URL: $url"
          try {
            $response = Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              Write-Host "✓ URL is accessible: $url"
            } else {
              Write-Error "URL returned status $($response.StatusCode): $url"
              exit 1
            }
          } catch {
            Write-Error "Failed to access URL: $url - $_"
            exit 1
          }
        }
  
  markdown-lint:
    name: Lint Markdown Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run markdownlint
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'
        ignore: node_modules
      continue-on-error: true
